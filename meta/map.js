// Generated by CoffeeScript 1.6.2
(function() {
  var allData, central, colours, i, line, lines, offset, picadilly, svg, svg_height, svg_width, _drawCircles, _drawLine, _i, _len, _mergeData;

  picadilly = [
    {
      "x": .05,
      "y": .05,
      "text": 'Leicster Square'
    }, {
      "x": .20,
      "y": .20,
      "text": 'Kings Cross'
    }, {
      "x": .80,
      "y": .05,
      "text": 'Euston'
    }, {
      "x": .95,
      "y": .60,
      "text": 'Covent Garden'
    }
  ];

  central = [
    {
      "x": .05,
      "y": .05,
      "text": 'Leicster'
    }, {
      "x": .40,
      "y": .10,
      "text": 'Morningside'
    }, {
      "x": .60,
      "y": .40,
      "text": 'Pall Mall'
    }, {
      "x": .95,
      "y": .60,
      "text": 'Covent Garden'
    }
  ];

  lines = [];

  lines[0] = picadilly;

  lines[1] = central;

  colours = ['teal', 'red'];

  svg_width = 2000;

  svg_height = 2000;

  offset = 0.02 * 2000;

  svg = d3.select("#tube-map").append("svg").attr("width", svg_width).attr("height", svg_height);

  _mergeData = function(lines) {
    var final_array, line, _i, _len;

    final_array = [];
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      Array.prototype.push.apply(final_array, line);
    }
    return final_array;
  };

  _drawCircles = function(lineData, SVG) {
    var circleAttributes, circles, text, textAttributes;

    circles = SVG.selectAll("circle").data(lineData).enter().append("circle").style("fill", "white").style("stroke", "black").style("stroke-width", 5);
    circleAttributes = circles.attr("cx", function(d) {
      return d.x * svg_width;
    }).attr("cy", function(d) {
      return d.y * svg_height;
    }).attr("r", 5);
    text = SVG.selectAll('text').data(lineData).enter().append('text').style('font-family', 'sans-serif').style('font-size', 25).style('fill', 'gray');
    return textAttributes = text.attr("x", function(d) {
      return d.x * svg_width + offset;
    }).attr("y", function(d) {
      return d.y * svg_height + offset;
    }).text(function(d) {
      return d.text;
    });
  };

  _drawLine = function(lineData, colour, SVG) {
    var lineFunction, lineGraph, totalLength;

    lineFunction = d3.svg.line().x(function(d) {
      return d.x * svg_width;
    }).y(function(d) {
      return d.y * svg_height;
    }).interpolate("cardinal");
    lineGraph = SVG.append("path").attr("d", lineFunction(lineData)).attr("stroke", colour).attr("stroke-width", 8).attr("fill", "none").attr("fill", "none").attr('opacity', '0.5');
    totalLength = lineGraph.node().getTotalLength();
    return lineGraph.attr("stroke-dasharray", totalLength + " " + totalLength).attr("stroke-dashoffset", totalLength).transition().duration(5000).ease("linear").attr("stroke-dashoffset", 0);
  };

  allData = _mergeData(lines);

  _drawCircles(allData, svg);

  for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
    line = lines[i];
    _drawLine(line, colours[i], svg);
  }

}).call(this);
